# Round 6
#Player draft
draft <- select.unit("Jill", draft, "AK")
# draft %>% filter(Unit=="Jill")
#Randomly eliminate 8 chars
delete <- sample(length(draft %>% filter(Unit != 0) %>% .$Drafted), 8)
draft <- select.unit(delete, draft, "Others")
#Player draft
draft <- select.unit("Jill", draft, "AK")
??replace
select.unit <- function(tmp.name,draft.df,player){
#If tmp.name is actually a name
if(length(tmp.name) <= 1){
#Check if the unit's been drafted already
if(draft.df %>% filter(Unit == tmp.name) %>% .$Drafted != 0) {
print("Unit already drafted.")
break
} else {
#Otherwise Add player to Drafted column
draft.df[which(draft$Unit==tmp.name),"Drafted"] <- player
print(paste(tmp.name," has been drafted by ", player))
}
} else { #If tmp.name is a vector of indecies
draft.df <- draft.df %>% mutate(Drafted = base::replace(Drafted, index==tmp.name, player)
for(i in 1:length(tmp.name)){
print(paste(draft.df[tmp.name[i],"Unit"], "has been selected by", player))
}
}
return(draft.df)
}
as.data.frame(draft)
dream.team <- c("Jill", "Nephenee")
#Round 1
#Player draft
draft <- select.unit("Jill", draft, "AK")
# draft %>% filter(Unit=="Jill")
#Randomly eliminate 8 chars
delete <- sort(sample(draft %>% filter(Drafted ==0) %>% .$index, 8))
draft <- select.unit(delete, draft, "Others")
#Player draft
as.data.frame(draft) %>% filter(Drafted == 0)
draft <- select.unit("Jill", draft, "AK")
#Round 2
#Player draft
draft <- select.unit("Jill", draft, "AK")
# draft %>% filter(Unit=="Jill")
#Randomly eliminate 8 chars
delete <- sample(length(draft %>% filter(Unit != 0) %>% .$Drafted), 8)
draft <- select.unit(delete, draft, "Others")
#Player draft
draft <- select.unit("Jill", draft, "AK")
# Round 3
# Round 4
# Round 5
# Round 6
#Player draft
draft <- select.unit("Jill", draft, "AK")
# draft %>% filter(Unit=="Jill")
#Randomly eliminate 8 chars
delete <- sample(length(draft %>% filter(Unit != 0) %>% .$Drafted), 8)
draft <- select.unit(delete, draft, "Others")
#Player draft
draft <- select.unit("Jill", draft, "AK")
select.unit <- function(tmp.name,draft.df,player){
#If tmp.name is actually a name
if(length(tmp.name) <= 1){
#Check if the unit's been drafted already
if(draft.df %>% filter(Unit == tmp.name) %>% .$Drafted != 0) {
print("Unit already drafted.")
break
} else {
#Otherwise Add player to Drafted column
draft.df[which(draft$Unit==tmp.name),"Drafted"] <- player
print(paste(tmp.name," has been drafted by ", player))
}
} else { #If tmp.name is a vector of indecies
draft.df <- draft.df %>% mutate(Drafted = base::replace(Drafted, index==tmp.name, player)
for(i in 1:length(tmp.name)){
print(paste(draft.df[tmp.name[i],"Unit"], "has been selected by", player))
}
}
return(draft.df)
}
as.data.frame(draft)
dream.team <- c("Jill", "Nephenee")
#Round 1
#Player draft
draft <- select.unit("Jill", draft, "AK")
# draft %>% filter(Unit=="Jill")
#Randomly eliminate 8 chars
delete <- sort(sample(draft %>% filter(Drafted ==0) %>% .$index, 8))
draft <- select.unit(delete, draft, "Others")
#Player draft
as.data.frame(draft) %>% filter(Drafted == 0)
draft <- select.unit("Jill", draft, "AK")
#Round 2
#Player draft
draft <- select.unit("Jill", draft, "AK")
# draft %>% filter(Unit=="Jill")
#Randomly eliminate 8 chars
delete <- sample(length(draft %>% filter(Unit != 0) %>% .$Drafted), 8)
draft <- select.unit(delete, draft, "Others")
#Player draft
draft <- select.unit("Jill", draft, "AK")
# Round 3
# Round 4
# Round 5
# Round 6
#Player draft
draft <- select.unit("Jill", draft, "AK")
# draft %>% filter(Unit=="Jill")
#Randomly eliminate 8 chars
delete <- sample(length(draft %>% filter(Unit != 0) %>% .$Drafted), 8)
draft <- select.unit(delete, draft, "Others")
#Player draft
draft <- select.unit("Jill", draft, "AK")
clear()
select.unit <- function(tmp.name,draft.df,player){
#If tmp.name is actually a name
if(length(tmp.name) <= 1){
#Check if the unit's been drafted already
if(draft.df %>% filter(Unit == tmp.name) %>% .$Drafted != 0) {
print("Unit already drafted.")
break
} else {
#Otherwise Add player to Drafted column
draft.df[which(draft$Unit==tmp.name),"Drafted"] <- player
print(paste(tmp.name," has been drafted by ", player))
}
} else { #If tmp.name is a vector of indecies
draft.df <- draft.df %>% mutate(Drafted = base::replace(Drafted, index==tmp.name, player)
for(i in 1:length(tmp.name)){
print(paste(draft.df[tmp.name[i],"Unit"], "has been selected by", player))
}
}
return(draft.df)
}
as.data.frame(draft)
dream.team <- c("Jill", "Nephenee")
#Round 1
#Player draft
draft <- select.unit("Jill", draft, "AK")
# draft %>% filter(Unit=="Jill")
#Randomly eliminate 8 chars
delete <- sort(sample(draft %>% filter(Drafted ==0) %>% .$index, 8))
draft <- select.unit(delete, draft, "Others")
#Player draft
as.data.frame(draft) %>% filter(Drafted == 0)
draft <- select.unit("Jill", draft, "AK")
#Round 2
#Player draft
draft <- select.unit("Jill", draft, "AK")
# draft %>% filter(Unit=="Jill")
#Randomly eliminate 8 chars
delete <- sample(length(draft %>% filter(Unit != 0) %>% .$Drafted), 8)
draft <- select.unit(delete, draft, "Others")
#Player draft
draft <- select.unit("Jill", draft, "AK")
# Round 3
# Round 4
# Round 5
# Round 6
#Player draft
draft <- select.unit("Jill", draft, "AK")
# draft %>% filter(Unit=="Jill")
#Randomly eliminate 8 chars
delete <- sample(length(draft %>% filter(Unit != 0) %>% .$Drafted), 8)
draft <- select.unit(delete, draft, "Others")
#Player draft
draft <- select.unit("Jill", draft, "AK")
select.unit <- function(tmp.name,draft.df,player){
#If tmp.name is actually a name
if(length(tmp.name) <= 1){
#Check if the unit's been drafted already
if(draft.df %>% filter(Unit == tmp.name) %>% .$Drafted != 0) {
print("Unit already drafted.")
break
} else {
#Otherwise Add player to Drafted column
draft.df[which(draft$Unit==tmp.name),"Drafted"] <- player
print(paste(tmp.name," has been drafted by ", player))
}
} else { #If tmp.name is a vector of indecies
draft.df <- draft.df %>% mutate(Drafted = base::replace(Drafted, index==tmp.name, player))
for(i in 1:length(tmp.name)){
print(paste(draft.df[tmp.name[i],"Unit"], "has been selected by", player))
}
}
return(draft.df)
}
draft <- Fire_Emblem_Stuff
draft$index <- c(1:dim(draft)[1])
draft <- draft %>%
mutate(Game = as.factor(Game), RD = as.factor(RD), Unit = gsub("[[:space:]]","", Unit))
draft <- select.unit("Jill", draft, "AK")
delete <- sort(sample(draft %>% filter(Drafted ==0) %>% .$index, 8))
draft <- select.unit(delete, draft, "Others")
as.data.frame(draft) %>% filter(Drafted == 0)
as.data.frame(draft)
select.unit <- function(tmp.name,draft.df,player){
#If tmp.name is actually a name
if(length(tmp.name) <= 1){
#Check if the unit's been drafted already
if(draft.df %>% filter(Unit == tmp.name) %>% .$Drafted != 0) {
print("Unit already drafted.")
break
} else {
#Otherwise Add player to Drafted column
draft.df[which(draft$Unit==tmp.name),"Drafted"] <- player
print(paste(tmp.name," has been drafted by ", player))
}
} else { #If tmp.name is a vector of indecies
draft.df <- draft.df %>% mutate(Drafted = replace(Drafted, index==tmp.name, player))
for(i in 1:length(tmp.name)){
print(paste(draft.df[tmp.name[i],"Unit"], "has been selected by", player))
}
}
return(draft.df)
}
delete <- sort(sample(draft %>% filter(Drafted ==0) %>% .$index, 8))
draft <- select.unit(delete, draft, "Others")
draft.df %>% mutate(Drafted = replace(Drafted, index==delete, "player"))
draft %>% mutate(Drafted = replace(Drafted, index==delete, "player"))
draft %>% mutate(Drafted = replace(Drafted, index==delete, "player")) %>% as.data.frame
delete
??replace
mtcars %>%
mutate(mpg=replace(mpg, cyl==4, NA)) %>%
as.data.frame()
draft %>% mutate(Drafted = replace(Drafted, index %in% delete, "player")) %>% as.data.frame
select.unit <- function(tmp.name,draft.df,player){
#If tmp.name is actually a name
if(length(tmp.name) <= 1){
#Check if the unit's been drafted already
if(draft.df %>% filter(Unit == tmp.name) %>% .$Drafted != 0) {
print("Unit already drafted.")
break
} else {
#Otherwise Add player to Drafted column
draft.df[which(draft$Unit==tmp.name),"Drafted"] <- player
print(paste(tmp.name," has been drafted by ", player))
}
} else { #If tmp.name is a vector of indecies
draft.df <- draft.df %>% mutate(Drafted = replace(Drafted, index %in% tmp.name, player))
for(i in 1:length(tmp.name)){
print(paste(draft.df[tmp.name[i],"Unit"], "has been selected by", player))
}
}
return(draft.df)
}
delete <- sort(sample(draft %>% filter(Drafted ==0) %>% .$index, 8))
draft <- select.unit(delete, draft, "Others")
draft <- Fire_Emblem_Stuff
draft$index <- c(1:dim(draft)[1])
draft <- draft %>%
mutate(Game = as.factor(Game), RD = as.factor(RD), Unit = gsub("[[:space:]]","", Unit))
select.unit <- function(tmp.name,draft.df,player){
#If tmp.name is actually a name
if(length(tmp.name) <= 1){
#Check if the unit's been drafted already
if(draft.df %>% filter(Unit == tmp.name) %>% .$Drafted != 0) {
print("Unit already drafted.")
break
} else {
#Otherwise Add player to Drafted column
draft.df[which(draft$Unit==tmp.name),"Drafted"] <- player
print(paste(tmp.name," has been drafted by ", player))
}
} else { #If tmp.name is a vector of indecies
draft.df <- draft.df %>% mutate(Drafted = replace(Drafted, index %in% tmp.name, player))
for(i in 1:length(tmp.name)){
print(paste(draft.df[tmp.name[i],"Unit"], "has been selected by", player))
}
}
return(draft.df)
}
as.data.frame(draft)
draft <- select.unit("Jill", draft, "AK")
delete <- sort(sample(draft %>% filter(Drafted ==0) %>% .$index, 8))
draft <- select.unit(delete, draft, "Others")
as.data.frame(draft) %>% filter(Drafted == 0)
as.data.frame(draft)
as.data.frame(draft) %>% filter(Drafted == 0)
c(.7*.13, .85*.8
)
c(.7*.13, .85*.08)
library(readr)
example_problem <- read_csv("E:/Windows.old.000/Users/AZNRICEBOX/Desktop/TransDev Sample Problem/example_problem.csv")
View(example_problem)
str(example_problem)
hist(example_problem$Latitude)
hist(example_problem$Longitude)
boxplot(hist(example_problem$Longitude))
boxplot(example_problem$Longitude)
which(example_problem$Longitude > 0)
outlier <- which(example_problem$Longitude > 0) # at row 4
example_problem <- example_problem[-outlier,]
nrow(example_problem)
example_problem <- read_csv("E:/Windows.old.000/Users/AZNRICEBOX/Desktop/TransDev Sample Problem/example_problem.csv")
nrow(example_problem)
outlier <- which(example_problem$Longitude > 0) # at row 4
example_problem <- example_problem[-outlier,]
nrow(example_problem)
man_dist <- function(x1,y1,x2,y2){
return(abs(x1-x2)+abs(y1-y2))
}
man_dist(0,0,1,1)
man_dist(5,4,1,1)
library(dplyr)
str(example_problem)
example_problem %>%
mutate(mana_dist = man_dist(Latitude,Longitude,AirportLatitude,AirportLongitude))
install.packages("dplyr")
install.packages("data.table")
install.packages("dtplyr")
install.packages("dplyr")
a <- data.frame(one=c(1,2,3), two=c("1", "2", "3"))
b <- data.frame(two=c(1,2,3), one=c("1", "2", "3"))
b <- b %>% select(-one,one)
library(dplyr)
b <- b %>% select(-one,one)
b
b <- b %>% select(-two,two)
b
a
sapply(a, class)
sapply(b, class)
a <- a %>% mutate(two = as.character(two))
b <- b %>% mutate(one = as.character(one))
a
b
sapply(a, class)
sapply(b, class)
a[0,]
a[0,] %>% plyr::rbind.fill(b)
a[0,] %>% plyr::rbind.fill(b) %>% sapply(class)
a %>% sapply(class)
a[1,] %>% plyr::rbind.fill(b) %>% sapply(class) %>% slice(-1)
a[1,] %>% plyr::rbind.fill(b) %>% slice(-1) %>% sapply(class)
for (x in colnames(a)) { a[,x] <- eval( call( paste0("as.", class(b[,x])), a[,x]) )}
sapply(a,class)
sapply(b,class)
a <- data.frame(one=c(1,2,3), two=c("1", "2", "3"))
b <- data.frame(two=c(1,2,3), one=c("1", "2", "3"))
for (x in colnames(a)) { a[,x] <- eval( call( paste0("as.", class(b[,x])), a[,x]) )}
a
b
sapply(a,class)
sapply(b,class)
?dbinom
dbinom(.5, 50, .25)
dbinom(.5, 100, .25)
dbinom(5, 100, .25)
?pnorm
pnorm(100, 145, 22)
dbinom(5, 5, .5)
dbinom(1, 2, .5)
dbinom(2, 4, .5)
dbinom(3, 4, .5)
dbinom(4, 4, .5)
pbinom(60,100,.5)
var1 <- 0
for(i in 60:100){
var1 <- var1 + dbinom(i, 100, .5)
}
var1
dbinom(60, 100, .5)
dbinom(0, 2, .5)
dbinom(0, 2, .5)  + dbinom(1, 2, .5)  + dbinom(2, 2, .5)
variable2 = 0
for(i in 60:100){
variable2 = variable2 + dbinom(i, 100, 0.5)
}
variable2
#Generating binomial probability using pbinom()
pbinom(60, 100, 0.5, lower.tail = FALSE)
#Generating binomial probability using pnorm()
pnorm(60-.5, 50, sqrt(100*0.5*0.5), lower.tail = FALSE)
pbinom(0, 2, .5)
pbinom(0, 2, .5)
dbinom(0, 2, .5)
pbinom(1, 2, .5)
pbinom(2, 2, .5)
1-pbinom(2, 2, .5)
# dbinom = mass binom
dbinom(60, 100, .5)
variable2 = 0
for(i in 60:100){
variable2 = variable2 + dbinom(i, 100, 0.5)
}
variable2
?pbinom
1-pbinom(60, 100, 0.5, lower.tail = TRUE)
pbinom(60, 100, 0.5, lower.tail = FALSE)
expected_value <- variance_value <- 0
for(i in 0:100){
expected_value <- expected_value + (i * dbinom(i, n, p))
variance_value <- variance_value + ( (i - n*p) -  dbinom(i, n, p) )
}
expected_value
variance_value
n <- 100
p <- 0.02
# We want to do E(x) for x ~ Binomial(n,p)    n_i * p_i
expected_value <- variance_value <- 0
for(i in 0:100){
expected_value <- expected_value + (i * dbinom(i, n, p))
variance_value <- variance_value + ( (i - n*p) -  dbinom(i, n, p) )
}
expected_value
variance_value
expected_value <- variance_value <- 0
for(i in 0:100){
expected_value <- expected_value + (i * dbinom(i, n, p))
variance_value <- variance_value + ( (i - n*p) -  dbinom(i, n, p) )^2
}
expected_value
variance_value
n*p
n <- 100
p <- 0.02
# We want to do E(x) for x ~ Binomial(n,p)    n_i * p_i
expected_value <- variance_value <- 0
for(i in 0:100){
expected_value <- expected_value + (i * dbinom(i, n, p))
variance_value <- variance_value + (i - n*p)^2*dbinom(i, n, p)
}
expected_value
variance_value
?pbinom
pbinom(1,2,y)
x <- .60
y <- .85
pbinom(1,2,y)
pbinom(2,2,y)
dbinom(1,2,y)
dbinom(2,2,y)
dbinom(1,2,x)
dbinom(2,2,x)
dbinom(0,2,x)
dbinom(1,2,x)
dbinom(2,2,x)
plot(x,y)
abline(x)
abline(a=x, b=0)
install.packages("readxl")
install.packages("dplyr")
install.packages("lubridate")
library(readxl)
library(dplyr)
library(lubridate)
excel_data <- read_excel("C:/Users/krolaal/OneDrive/Project MGSC 711 - April05.xlsx",
sheet = "ATM Data", skip = 10)
excel_data <- excel_data %>% dplyr::select(-contains("_"))
excel_data <- excel_data %>% dplyr::slice(1:(nrow(excel_data)-2))
names(excel_data) <- tolower(names(excel_data))
excel_data <- read_excel("Z:/OneDrive/Project MGSC 711 - April05.xlsx",
sheet = "ATM Data", skip = 10)
excel_data <- excel_data %>% dplyr::select(-contains("_"))
excel_data <- excel_data %>% dplyr::slice(1:(nrow(excel_data)-2))
names(excel_data) <- tolower(names(excel_data))
excel_data <- read_excel("Z:/OneDrive/Project MGSC 711 - April05.xlsx",
sheet = "ATM Data", skip = 10)
excel_data <- read_excel("Z:/OneDrive/MBA Homework Files/Project MGSC 711 - April05.xlsx",
sheet = "ATM Data", skip = 10)
# excel_data <- read_excel("C:/Users/krolaal/OneDrive/Project MGSC 711 - April05.xlsx",
#                           sheet = "ATM Data", skip = 10)
excel_data <- excel_data %>% dplyr::select(-contains("_"))
excel_data <- excel_data %>% dplyr::slice(1:(nrow(excel_data)-2))
names(excel_data) <- tolower(names(excel_data))
excel_data%>% str
excel_data$weekday %>% table
excel_data$type %>% table
excel_data %>% dplyr::select(weekday,type) %>% table
excel_data %>% filter(type=="Withdrawal", weekday=="Fri", location=="CampusA") %>% nrow()
excel_data %>% filter(grepl("drive",location)) %>% pull(location) %>% unique
excel_data$location %>% table
excel_data %>% filter(grepl("drive",location, ignore.case=T)) %>% pull(location) %>% unique
excel_data$type %>% table
excel_data %>% filter(type == "Transfer", grepl("B",location, ignore.case=T)) %>% dplyr::summarize(mean = mean(amount), var = var(amount))
excel_data %>% filter(type == "Transfer", grepl("drive",location, ignore.case=T)) %>% dplyr::summarize(mean = mean(amount), var = var(amount))
excel_data %>% filter(type == "Transfer", grepl("B",location, ignore.case=T)) %>% dplyr::summarize(mean = mean(amount), var = var(amount))
excel_data %>% filter(type == "Transfer", grepl("drive",location, ignore.case=T)) %>% dplyr::summarize(mean = mean(amount), var = var(amount), n())
excel_data %>% filter(type == "Transfer", grepl("B",location, ignore.case=T)) %>% dplyr::summarize(mean = mean(amount), var = var(amount), n())
?ttest
t.test(excel_data %>% filter(type == "Transfer", grepl("drive",location, ignore.case=T)) %>% pull(amount),  excel_data %>% filter(type == "Transfer", grepl("B",location, ignore.case=T)) %>% pull(amount))
?t.test
t.test(excel_data %>% filter(type == "Transfer", grepl("drive",location, ignore.case=T)) %>% pull(amount),  excel_data %>% filter(type == "Transfer", grepl("B",location, ignore.case=T)) %>% pull(amount), alternative=c("greater"), mu=500, conf.level = .98)
setwd("Z:/Portfolio/krolak_and_turner")
# Set correct working directory up depending on who's running code.
krolak_or_turner <- ""
krolak_or_turner <- "krolak"
if(krolak_or_turner == "krolak"){
setwd("Z:/Portfolio/krolak_and_turner")
}else if(krolak_or_turner == "turner"){
setwd("PUT YOUR FILE PATH HERE")
}
install.packages("DataExplorer")
install.packages("data.table")
install.packages("dplyr")
library(DataExplorer)
library(data.table)
library(dplyr)
# load training data
train <- fread("./data_in/train.csv")
# load testing data
test <- fread("./data_in/test.csv")
# meh
create_report(train)
# Make sure to install if you haven't already
install.packages("DataExplorer")
install.packages("DataExplorer")
